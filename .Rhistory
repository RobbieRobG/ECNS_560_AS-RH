labs(
title = "Distribution of Population Proportions by Age Group From 2011 - 2023",
y = "Proportion",
x = "Age Group"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 14),  # Increase size of x-axis labels
axis.text.y = element_text(size = 14),  # Increase size of x-axis labels
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
theme(legend.position = "none") +  # Remove legend if not needed
transition_states(YEAR, transition_length = 2, state_length = 1, wrap = FALSE) +  # Animate by year
ease_aes('linear')  # Define easing of the animation
# Save the animated plot
anim <- animate(plot, nframes = 13, width = 1600, height = 1200)
anim_save("age_proportion_distribution_animation.gif", animation = anim)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(gganimate)
# Specify the debt-to-income ratio variables
debt_to_income_vars <- c("Annual_Debt_to_income_ratio_low", "Annual_Debt_to_income_ratio_high")
# Create a named vector for the new labels
debt_labels <- c("Low_Estimate", "High_Estimate")
# Reshape the data into long format for ggplot
long_debt_data <- Merged_Population_SAGDP_DebtToIncomeRatio_Data %>%
select(YEAR, all_of(debt_to_income_vars)) %>%
pivot_longer(cols = all_of(debt_to_income_vars), names_to = "Debt_Group", values_to = "Ratio")
# Map the original debt groups to the new labels
long_debt_data$Debt_Group <- factor(long_debt_data$Debt_Group,
levels = debt_to_income_vars,
labels = debt_labels)
# Create the ggplot object for boxplots with debt groups on the x-axis
debt_plot <- ggplot(long_debt_data, aes(x = Debt_Group, y = Ratio)) +
geom_boxplot(aes(fill = Debt_Group), outlier.shape = NA, alpha = 0.5) +  # Use boxplot to visualize ratios
geom_jitter(aes(color = Debt_Group), width = 0.2, alpha = 0.5) +  # Add jitter to show distribution of points
labs(
title = "Distribution of Debt-to-Income Ratios by Year from 2011-2023",
y = "Debt-to-Income Ratio",
x = "Debt Group"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 14),  # Increase size of x-axis labels
axis.text.y = element_text(size = 14),  # Increase size of x-axis labels
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
theme(legend.position = "none") +  # Remove legend if not needed
transition_states(YEAR, transition_length = 2, state_length = 1, wrap = FALSE) +  # Animate by year
ease_aes('linear')  # Define easing of the animation
# Save the animated plot
debt_anim <- animate(debt_plot, nframes = 26, width = 800, height = 600)
anim_save("debt_to_income_distribution_animation.gif", animation = debt_anim)
histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data, aes(x = Annual_Debt_to_income_ratio_low)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Annual Debt-to-Income Ratio (Low)",
x = "Annual Debt-to-Income Ratio (Low)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
# Save the histogram as a JPEG file
ggsave(filename = "debt_to_income_histogram_low.jpeg", plot = histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for the debt-to-income ratio (high)
histogram_high_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data, aes(x = Annual_Debt_to_income_ratio_high)) +
geom_histogram(binwidth = 0.05, fill = "red", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Annual Debt-to-Income Ratio (High)",
x = "Annual Debt-to-Income Ratio (High)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
# Save the histogram as a JPEG file
ggsave(filename = "debt_to_income_histogram_high.jpeg", plot = histogram_high_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for the debt-to-income ratio variable
histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data, aes(x = Annual_Debt_to_income_ratio_low)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Annual Debt-to-Income Ratio (Low Estimate)",
x = "Annual Debt-to-Income Ratio (Low Estimate)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
# Save the histogram as a JPEG file
ggsave(filename = "debt_to_income_histogram_low.jpeg", plot = histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for the debt-to-income ratio (high)
histogram_high_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data, aes(x = Annual_Debt_to_income_ratio_high)) +
geom_histogram(binwidth = 0.05, fill = "red", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Annual Debt-to-Income Ratio (High Estimate)",
x = "Annual Debt-to-Income Ratio (High Estimate)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
# Save the histogram as a JPEG file
ggsave(filename = "debt_to_income_histogram_high.jpeg", plot = histogram_high_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data, aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 10000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data,
aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 2000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth for better distribution
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
xlim(c(0, max(Merged_Population_SAGDP_DebtToIncomeRatio_Data$Real.GDP..millions.of.chained.2017.dollars..1., na.rm = TRUE)))  # Set x-axis limit
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data,
aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 2000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth for better distribution
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
xlim(c(0, max(Merged_Population_SAGDP_DebtToIncomeRatio_Data$Real.GDP..millions.of.chained.2017.dollars..1., na.rm = TRUE)))  # Set x-axis limit
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP
aes(x = log(Real.GDP..millions.of.chained.2017.dollars..1.)) +
labs(
x = "Real GDP (Millions of Chained 2017 Dollars(logged))",
) +
theme(
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
) +
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP with a log-transformed x-axis
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data,
aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 2000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth for better distribution
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
scale_x_log10()  # Log transform the x-axis
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram_log.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP with a log-transformed x-axis
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data,
aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 200, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth for better distribution
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
scale_x_log10()  # Log transform the x-axis
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram_log.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP with a log-transformed x-axis
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data,
aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 1, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth for better distribution
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
scale_x_log10()  # Log transform the x-axis
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram_log.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
# Create a histogram for Real GDP with a log-transformed x-axis
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data,
aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = .1, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth for better distribution
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
) +
scale_x_log10()  # Log transform the x-axis
# Save the histogram as a JPEG file
ggsave(filename = "real_gdp_histogram_log.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
data1 <- read.csv("C:/Users/Al/OneDrive/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/ALMOST_FINAL_________Merged_Population_SAGDP_DebtToIncomeRatio_Data.csv")
data2 <- read.csv("C:/Users/Al/OneDrive/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/State_Finances_All_Years.csv")
library(tidyverse)
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gganimate)
FinalDataset <- data1 |> full_join(data2, by  c("State" = "State", "Year" = "Year"))
FinalDataset <- data1 |> full_join(data2, by "State" = "State", "Year" = "Year")
FinalDataset <- data1 |> full_join(data2, by State, Year)
FinalDataset <- data1 |> full_join(data2, by = c("State", "Year"))
View(FinalDataset)
write.csv(FinalDataset, "FinalDataset.csv", row.names = FALSE)
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes", "Property", "Sales.and.gross.receipts"), names_to = "Revenue_Source", values_to = "Amount")
ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggplot(FinalDataset, aes(x = Year, y = Taxes, color = State)) +
geom_line() +
labs(title = "Total Taxes by State Over Time",
x = "Year",
y = "Total Taxes (in dollars)") +
theme_minimal()
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount")
ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime.jpeg", plot = gdp_histogram_plot, width = 10, height = 6, dpi = 300)
library(tidyr)
library(ggplot2)
# Select the relevant columns and pivot to long format
revenue_categories <- FinalDataset %>%
select(Year, State, Property, Sales.and.gross.receipts, General.sales, Selective.sales,
Motor.fuel, Alcoholic.beverage, Tobacco.products, Public.utilities,
Other.selective.sales, Individual.income, Corporate.income,
Motor.vehicle.license, Other.taxes) %>%
pivot_longer(cols = Property:Other.taxes, names_to = "Revenue_Source", values_to = "Amount")
# Create the stacked bar chart
ggplot(revenue_categories, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources by State Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal() +
facet_wrap(~State)
# Create the stacked bar chart
ggplot(revenue_categories, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources by State Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
# Select the relevant columns and pivot to long format
revenue_categories <- FinalDataset %>%
select(Year, State, Property, Sales.and.gross.receipts, General.sales, Selective.sales,
Motor.fuel, Alcoholic.beverage, Tobacco.products, Public.utilities,
Other.selective.sales, Individual.income, Corporate.income,
Motor.vehicle.license, Other.taxes) %>%
pivot_longer(cols = Property:Other.taxes, names_to = "Revenue_Source", values_to = "Amount")
# Create the stacked bar chart
ggplot(revenue_categories, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources by Over Time, All States",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime.jpeg", plot = revenue_data, width = 10, height = 6, dpi = 300)
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount")
ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime.jpeg", plot = revenue_data, width = 10, height = 6, dpi = 300)
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount")
tax_plot <- ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime.jpeg", plot = tax_plot, width = 10, height = 6, dpi = 300)
# Create the stacked bar chart
tax_plot2 <- ggplot(revenue_categories, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources by Over Time, All States",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime.jpeg", plot = tax_plot2, width = 10, height = 6, dpi = 300)
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount")
tax_plot <- ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime.jpeg", plot = tax_plot, width = 10, height = 6, dpi = 300)
library(tidyr)
library(ggplot2)
# Select the relevant columns and pivot to long format
revenue_categories <- FinalDataset %>%
select(Year, State, Property, Sales.and.gross.receipts, General.sales, Selective.sales,
Motor.fuel, Alcoholic.beverage, Tobacco.products, Public.utilities,
Other.selective.sales, Individual.income, Corporate.income,
Motor.vehicle.license, Other.taxes) %>%
pivot_longer(cols = Property:Other.taxes, names_to = "Revenue_Source", values_to = "Amount")
# Create the stacked bar chart
tax_plot2 <- ggplot(revenue_categories, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue Sources by Over Time, All States",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTimebySource.jpeg", plot = tax_plot2, width = 10, height = 6, dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gganimate)
library(tidyr)
data1 <- read.csv("C:/Users/Al/OneDrive/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/ALMOST_FINAL_________Merged_Population_SAGDP_DebtToIncomeRatio_Data.csv")
data2 <- read.csv("C:/Users/Al/OneDrive/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/State_Finances_All_Years.csv")
FinalDataset <- data1 |> full_join(data2, by = c("State", "Year"))
data1 <- read.csv("C:/Users/Al/OneDrive/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/Intermediate Cleaning Datasets/ALMOST_FINAL_________Merged_Population_SAGDP_DebtToIncomeRatio_Data.csv")
data2 <- read.csv("C:/Users/Al/OneDrive/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/Intermediate Cleaning Datasets/State_Finances_All_Years.csv")
FinalDataset <- data1 |> full_join(data2, by = c("State", "Year"))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(gganimate)
# Specify the variable for Real GDP
gdp_variable <- "Real.GDP..millions.of.chained.2017.dollars..1."
# Create the ggplot object for boxplots with GDP over time
gdp_plot <- ggplot(FinalDataset, aes(x = as.factor(Year), y = .data[[gdp_variable]])) +
geom_boxplot(aes(fill = as.factor(Year)), outlier.shape = NA, alpha = 0.5) +  # Boxplot to visualize GDP distribution
geom_jitter(width = 0.2, alpha = 0.3) +  # Add jitter for distribution of points
labs(
title = "Distribution of Real GDP by Year from 2011-2023",
y = "Real GDP (Millions of Chained 2017 Dollars)",
x = "Year"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 18),
legend.position = "none"
) +
transition_states(Year, transition_length = 2, state_length = 1, wrap = FALSE) +  # Animate by Year
ease_aes('linear')  # Smooth transition
# Save the animated plot as a GIF
gdp_animation <- animate(gdp_plot, nframes = 26, width = 800, height = 600)
anim_save("real_gdp_distribution_animation.gif", animation = gdp_animation)
# Specify the variable for Real GDP
gdp_variable <- "Real.GDP..millions.of.chained.2017.dollars..1."
# Create the ggplot object for boxplots with GDP over time
gdp_plot <- ggplot(FinalDataset, aes(x = as.factor(Year), y = y = log(.data[[gdp_variable]]))) +
# Save the animated plot as a GIF
gdp_animation <- animate(gdp_plot, nframes = 26, width = 800, height = 600)
anim_save("real_gdp_distribution_animation.gif", animation = gdp_animation)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(gganimate)
# Specify the variable for Real GDP
gdp_variable <- "Real.GDP..millions.of.chained.2017.dollars..1."
# Create the ggplot object for boxplots with GDP over time
gdp_plot <- ggplot(FinalDataset, aes(x = as.factor(Year), y = log(.data[[gdp_variable]]))) +
geom_boxplot(aes(fill = as.factor(Year)), outlier.shape = NA, alpha = 0.5) +  # Boxplot to visualize GDP distribution
geom_jitter(width = 0.2, alpha = 0.3) +  # Add jitter for distribution of points
labs(
title = "Distribution of Real GDP by Year from 2011-2023",
y = "Real GDP (Millions of Chained 2017 Dollars, Logged)",
x = "Year"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(size = 18),
legend.position = "none"
) +
transition_states(Year, transition_length = 2, state_length = 1, wrap = FALSE) +  # Animate by Year
ease_aes('linear')  # Smooth transition
# Save the animated plot as a GIF
gdp_animation <- animate(gdp_plot, nframes = 26, width = 800, height = 600)
anim_save("real_gdp_distribution_animation.gif", animation = gdp_animation)
setwd("~/GitHub/ECNS_560_AS-RH")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(gganimate)
library(tidyr)
setwd("~/GitHub/ECNS_560_AS-RH/Visualizations")
setwd("~/GitHub/ECNS_560_AS-RH")
setwd("~/GitHub/ECNS_560_AS-RH/Visualizations")
state_data = read_csv("2. Merged Data/FinalDataset.csv")
# creates count of population older 65 and older
retirement_age = state_data|>
select(State, CTYNAME, Year, POPESTIMATE,starts_with("AGE"))|>
mutate(Retirement_Age_Proportion = AGE6569_PROP + AGE7074_PROP +
AGE7579_PROP + AGE8084_PROP + AGE85PLUS_PROP)|>
filter(!is.na(State))
# Summarize the data to get a unique value for each State and Year
retirement_age_summary <- retirement_age %>%
group_by(State, Year) %>%
summarize(Retirement_Age_Proportion = mean(Retirement_Age_Proportion, na.rm = TRUE), .groups = 'drop')|>
filter(!is.na(Retirement_Age_Proportion) & !is.nan(Retirement_Age_Proportion))
# Check the structure of the summarized data
print(head(retirement_age_summary))
print(unique(retirement_age_summary$Year))
print(unique(retirement_age_summary$State))
# Ensure Year is a factor with levels in the correct order
retirement_age_summary$Year <- factor(retirement_age_summary$Year,
levels = sort(unique(retirement_age_summary$Year)))
# Create the heatmap
ggplot(retirement_age_summary, aes(x = Year, y = State, fill = Retirement_Age_Proportion)) +
geom_tile(color = "white") +  # Adds borders to tiles
labs(
title = "Retirement Age Proportion of State Population",
x = "Year",
y = "State",
fill = "Retirement Age Proportion"
) +
theme_minimal() +
scale_fill_viridis_c(option = "D") +
theme(
axis.text.x = element_text(angle = 80, hjust = 1, size = 8, color = "black"),
axis.text.y = element_text(size = 8, color = "black"),
plot.title = element_text(size = 14, color = "black", face = "bold"),
axis.title.x = element_text(size = 12, color = "black"),
axis.title.y = element_text(size = 12, color = "black")
) +
coord_fixed() -> retirement_heatmap
# Save the heatmap as a JPEG file
ggsave(filename = "Visualizations/retirement_heatmap.jpeg", plot = retirement_heatmap, width = 10, height = 6, dpi = 300)
setwd("~/GitHub/ECNS_560_AS-RH")
