#Remove missing values
complete_cases <- complete.cases(X, y)
X <- X[complete_cases, ]
y <- y[complete_cases]
# Step 3: Run ElasticNet Regression
# Set the seed for reproducibility
set.seed(123)  # For reproducibility
# Define training (80%) and testing (20%) indices
train_indices <- sample(seq_len(nrow(X)), size = 0.8 * nrow(X))
# Split the data
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
unique(y_train)
# Fit ElasticNet model using cross-validation to find optimal lambda
elasticnet_model <- cv.glmnet(X_train, y_train, alpha = 0.5, family = "gaussian")
# Predict on the test set
predictions <- predict(elasticnet_model, newx = X_test, s = "lambda.min")
# Calculate performance metrics (e.g., Mean Squared Error)
mse <- mean((y_test - predictions)^2)
cat("Mean Squared Error on Test Set:", mse, "\n")
# View results and plot cross-validation results
print(elasticnet_model)
plot(elasticnet_model)
# Get the best lambda value (from cross-validation)
best_lambda <- elasticnet_model$lambda.min
print(best_lambda)
# Step 4: Extract Coefficients
# Get the coefficients for the optimal lambda
best_coefficients <- coef(elasticnet_model, s = "lambda.min")
print(best_coefficients)
?cv.glmnet
# Fit ElasticNet model using cross-validation to find optimal lambda
elasticnet_model <- cv.glmnet(X_train, y_train, alpha = NULL , family = "gaussian")
# Fit ElasticNet model using cross-validation to find optimal lambda
elasticnet_model <- cv.glmnet(X_train, y_train, family = "gaussian")
# Predict on the test set
predictions <- predict(elasticnet_model, newx = X_test, s = "lambda.min")
# Calculate performance metrics (e.g., Mean Squared Error)
mse <- mean((y_test - predictions)^2)
cat("Mean Squared Error on Test Set:", mse, "\n")
# View results and plot cross-validation results
print(elasticnet_model)
plot(elasticnet_model)
# Get the best lambda value (from cross-validation)
best_lambda <- elasticnet_model$lambda.min
print(best_lambda)
# Fit ElasticNet model using cross-validation to find optimal lambda
elasticnet_model <- cv.glmnet(X_train, y_train, alpha = alpha, family = "gaussian")
# Fit ElasticNet model using cross-validation to find optimal lambda
elasticnet_model <- cv.glmnet(X_train, y_train, alpha = seq(0, 1, by = 0.1), family = "gaussian")
# Define the sequence of alpha values to search over
alpha_values <- seq(0, 1, by = 0.1)
# Initialize a list to store cross-validation results
cv_results <- list()
# Loop over each alpha value
for (alpha_value in alpha_values) {
# Perform cross-validation for this specific alpha
cv_results[[as.character(alpha_value)]] <- cv.glmnet(X_train, y_train, alpha = alpha_value, family = "gaussian")
}
# Now, find the best alpha by comparing cross-validation errors
cv_errors <- sapply(cv_results, function(model) min(model$cvm))  # Get the minimum cross-validation error for each alpha
# Find the alpha value with the lowest error
best_alpha <- alpha_values[which.min(cv_errors)]
best_lambda <- cv_results[[as.character(best_alpha)]]$lambda.min
cat("Optimal alpha: ", best_alpha, "\n")
cat("Optimal lambda: ", best_lambda, "\n")
# Define the sequence of alpha values to search over
alpha_values <- seq(0, 1, by = 0.05)
# Initialize a list to store cross-validation results
cv_results <- list()
# Loop over each alpha value
for (alpha_value in alpha_values) {
# Perform cross-validation for this specific alpha
cv_results[[as.character(alpha_value)]] <- cv.glmnet(X_train, y_train, alpha = alpha_value, family = "gaussian")
}
# Now, find the best alpha by comparing cross-validation errors
cv_errors <- sapply(cv_results, function(model) min(model$cvm))  # Get the minimum cross-validation error for each alpha
# Find the alpha value with the lowest error
best_alpha <- alpha_values[which.min(cv_errors)]
best_lambda <- cv_results[[as.character(best_alpha)]]$lambda.min
cat("Optimal alpha: ", best_alpha, "\n")
cat("Optimal lambda: ", best_lambda, "\n")
# Fit the final Elastic Net model using the best alpha and lambda
final_model <- glmnet(X_train, y_train, alpha = best_alpha, lambda = best_lambda)
# Predict on the test set
predictions <- predict(final_model, newx = X_test, s = "lambda.min")
# Calculate performance metrics (e.g., Mean Squared Error)
mse <- mean((y_test - predictions)^2)
cat("Mean Squared Error on Test Set:", mse, "\n")
# View results and plot cross-validation results
print(elasticnet_model)
# View results and plot cross-validation results
print(final_model)
plot(final_model)
# Get the best lambda value (from cross-validation)
best_lambda <- final_model$lambda.min
print(best_lambda)
# Step 4: Extract Coefficients
# Get the coefficients for the optimal lambda
best_coefficients <- coef(elasticnet_model, s = "lambda.min")
print(best_coefficients)
cat("Optimal alpha: ", best_alpha, "\n")
cat("Optimal lambda: ", best_lambda, "\n")
# Define the sequence of alpha values to search over
alpha_values <- seq(0, 1, by = 0.05)
# Initialize a list to store cross-validation results
cv_results <- list()
# Loop over each alpha value
for (alpha_value in alpha_values) {
# Perform cross-validation for this specific alpha
cv_results[[as.character(alpha_value)]] <- cv.glmnet(X_train, y_train, alpha = alpha_value, family = "gaussian")
}
# Now, find the best alpha by comparing cross-validation errors
cv_errors <- sapply(cv_results, function(model) min(model$cvm))  # Get the minimum cross-validation error for each alpha
# Find the alpha value with the lowest error
best_alpha <- alpha_values[which.min(cv_errors)]
best_lambda <- cv_results[[as.character(best_alpha)]]$lambda.min
cat("Optimal alpha: ", best_alpha, "\n")
cat("Optimal lambda: ", best_lambda, "\n")
# Fit the final Elastic Net model using the best alpha and lambda
final_model <- glmnet(X_train, y_train, alpha = best_alpha, lambda = best_lambda)
# Predict on the test set
predictions <- predict(final_model, newx = X_test, s = "lambda.min")
# Calculate performance metrics (e.g., Mean Squared Error)
mse <- mean((y_test - predictions)^2)
cat("Mean Squared Error on Test Set:", mse, "\n")
# View results and plot cross-validation results
print(final_model)
plot(final_model)
plot(lamda.min)
plot(lambda.min)
plot(best_lambda)
plot(lambda)
plot(predictions)
# View results and plot cross-validation results
print(final_model)
# Get the best lambda value (from cross-validation)
best_lambda <- final_model$lambda.min
print(best_lambda)
# Step 4: Extract Coefficients
# Get the coefficients for the optimal lambda
best_coefficients <- coef(elasticnet_model, s = "lambda.min")
print(best_coefficients)
# Step 5: Extract Significant Variables
selected_variables <- rownames(best_coefficients)[which(best_coefficients != 0)]
selected_variables <- selected_variables[selected_variables != "(Intercept)"]  # Remove intercept
# Step 6: Prepare Data for Fixed Effects Panel Regression
FinalDataset_selected <- FinalDataset %>%
select(UniqueID, Year, Annual_Debt_to_income_ratio_low, all_of(selected_variables)) %>%
arrange(UniqueID, Year)
# Step 7: Run Fixed Effects Panel Regression
fixed_effects_model <- plm(Annual_Debt_to_income_ratio_low ~ .,
data = FinalDataset_selected,
index = c("UniqueID", "Year"),
model = "within")
# View the summary of the fixed effects model
summary(fixed_effects_model)
fixed_effects_model
vif(lm(Annual_Debt_to_income_ratio_low ~ ., data = FinalDataset_selected))
library(car)
vif(lm(Annual_Debt_to_income_ratio_low ~ ., data = FinalDataset_selected))
coefficients(fixed_effects_model)
cor_matrix <- cor(FinalDataset_selected %>% select(-Annual_Debt_to_income_ratio_low))
# Step 4: Extract Coefficients
# Get the coefficients for the optimal lambda
best_coefficients <- coef(elasticnet_model, s = "lambda.min")
print(best_coefficients)
# Step 7: Run Fixed Effects Panel Regression
fixed_effects_model <- plm(Annual_Debt_to_income_ratio_low ~ .,
data = FinalDataset_selected,
model = "within")
fixed_effects_model
# View the summary of the fixed effects model
summary(fixed_effects_model)
View(FinalDataset)
X <- as.matrix(FinalDataset %>%
select(
POPESTIMATE, AGE04_PROP, AGE59_PROP, AGE1014_PROP, AGE1519_PROP, AGE2024_PROP, AGE2529_PROP,
AGE3034_PROP, AGE3539_PROP, AGE4044_PROP, AGE4549_PROP, AGE5054_PROP, AGE5559_PROP,
AGE6064_PROP, AGE6569_PROP, AGE7074_PROP, AGE7579_PROP, AGE8084_PROP, AGE85PLUS_PROP,
Real.GDP..millions.of.chained.2017.dollars..1., Compensation..millions.of.dollars.,
Gross.operating.surplus..millions.of.dollars.,
Taxes.on.production.and.imports..TOPI...millions.of.dollars., Subsidies..millions.of.dollars.,
Property, Sales.and.gross.receipts, General.sales, Selective.sales,
Motor.fuel, Alcoholic.beverage, Tobacco.products, Public.utilities, Other.selective.sales,
Individual.income, Corporate.income, Motor.vehicle.license, Other.taxes,
Charges.and.miscellaneous.general.revenue, Current.charges, Education,
Hospitals, Highways, Air.transportation..airports.,
Parking.facilities, Sea.and.inland.port.facilities, Natural.resources,
Parks.and.recreation, Housing.and.community.development, Sewerage, Solid.waste.management,
Other.charges, Capital.outlay, Higher.education, Elementary...secondary, Other.education,
Libraries, Public.welfare, Cash.assistance.payments, Vendor.payments, Other.public.welfare,
Health, Veterans..services, Police.protection, Debt.outstanding, Employment.security.administration
)
)
y <- FinalDataset$Annual_Debt_to_income_ratio_low
complete_cases <- complete.cases(X, y)
X <- X[complete_cases, ]
y <- y[complete_cases]
# Set the seed for reproducibility
set.seed(123)  # For reproducibility
# Define training (80%) and testing (20%) indices
train_indices <- sample(seq_len(nrow(X)), size = 0.8 * nrow(X))
# Split the data
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
unique(y_train)
# Define the sequence of alpha values to search over
alpha_values <- seq(0, 1, by = 0.05)
# Initialize a list to store cross-validation results
cv_results <- list()
# Loop over each alpha value
for (alpha_value in alpha_values) {
# Perform cross-validation for this specific alpha
cv_results[[as.character(alpha_value)]] <- cv.glmnet(X_train, y_train, alpha = alpha_value, family = "gaussian")
}
# Now, find the best alpha by comparing cross-validation errors
cv_errors <- sapply(cv_results, function(model) min(model$cvm))  # Get the minimum cross-validation error for each alpha
# Find the alpha value with the lowest error
best_alpha <- alpha_values[which.min(cv_errors)]
best_lambda <- cv_results[[as.character(best_alpha)]]$lambda.min
cat("Optimal alpha: ", best_alpha, "\n")
cat("Optimal lambda: ", best_lambda, "\n")
# Fit the final Elastic Net model using the best alpha and lambda
final_model <- glmnet(X_train, y_train, alpha = best_alpha, lambda = best_lambda)
# Predict on the test set
predictions <- predict(final_model, newx = X_test, s = "lambda.min")
# Calculate performance metrics (e.g., Mean Squared Error)
mse <- mean((y_test - predictions)^2)
cat("Mean Squared Error on Test Set:", mse, "\n")
# View results and plot cross-validation results
print(final_model)
plot(predictions)
# Step 4: Extract Coefficients
# Get the coefficients for the optimal lambda
best_coefficients <- coef(elasticnet_model, s = "lambda.min")
print(best_coefficients)
# Step 5: Extract Significant Variables
selected_variables <- rownames(best_coefficients)[which(best_coefficients != 0)]
selected_variables <- selected_variables[selected_variables != "(Intercept)"]  # Remove intercept
# Step 6: Prepare Data for Fixed Effects Panel Regression
FinalDataset_selected <- FinalDataset %>%
select(UniqueID, Year, Annual_Debt_to_income_ratio_low, all_of(selected_variables)) %>%
arrange(UniqueID, Year)
# Step 7: Run Fixed Effects Panel Regression
fixed_effects_model <- plm(Annual_Debt_to_income_ratio_low ~ .,
data = FinalDataset_selected,
model = "within")
# View the summary of the fixed effects model
summary(fixed_effects_model)
print(best_coefficients)
fe_model_plm <- plm(
Annual_Debt_to_income_ratio_low ~
POPESTIMATE + AGE04_PROP + AGE59_PROP + AGE1014_PROP + AGE1519_PROP +
AGE2529_PROP + AGE3034_PROP + AGE3539_PROP + AGE4044_PROP + AGE4549_PROP +
AGE5054_PROP + AGE5559_PROP + AGE6064_PROP + AGE6569_PROP + AGE7074_PROP +
AGE7579_PROP + AGE8084_PROP + AGE85PLUS_PROP +
Real.GDP..millions.of.chained.2017.dollars..1. +
Compensation..millions.of.dollars. + Gross.operating.surplus..millions.of.dollars. +
Taxes.on.production.and.imports..TOPI...millions.of.dollars. +
Subsidies..millions.of.dollars. + From.State.government1 + Taxes + Property +
Sales.and.gross.receipts + General.sales + Selective.sales + Motor.fuel +
Alcoholic.beverage + Tobacco.products + Public.utilities + Other.selective.sales +
Individual.income + Corporate.income + Motor.vehicle.license + Other.taxes +
Charges.and.miscellaneous.general.revenue + Current.charges + Education +
School.lunch.sales..gross. + Hospitals + Highways + Air.transportation..airports. +
Parking.facilities + Sea.and.inland.port.facilities + Natural.resources +
Parks.and.recreation + Housing.and.community.development + Sewerage +
Solid.waste.management + Other.charges + Capital.outlay + Higher.education +
Elementary...secondary + Other.education + Libraries + Public.welfare +
Cash.assistance.payments + Vendor.payments + Other.public.welfare + Health +
Veterans..services + Police.protection + Debt.outstanding +
Employment.security.administration,
data = pdata,
model = "within"
)
fe_model_plm <- plm(
Annual_Debt_to_income_ratio_low ~
POPESTIMATE + AGE04_PROP + AGE59_PROP + AGE1014_PROP + AGE1519_PROP +
AGE2529_PROP + AGE3034_PROP + AGE3539_PROP + AGE4044_PROP + AGE4549_PROP +
AGE5054_PROP + AGE5559_PROP + AGE6064_PROP + AGE6569_PROP + AGE7074_PROP +
AGE7579_PROP + AGE8084_PROP + AGE85PLUS_PROP +
Real.GDP..millions.of.chained.2017.dollars..1. +
Compensation..millions.of.dollars. + Gross.operating.surplus..millions.of.dollars. +
Taxes.on.production.and.imports..TOPI...millions.of.dollars. +
Subsidies..millions.of.dollars. + From.State.government1 + Taxes + Property +
Sales.and.gross.receipts + General.sales + Selective.sales + Motor.fuel +
Alcoholic.beverage + Tobacco.products + Public.utilities + Other.selective.sales +
Individual.income + Corporate.income + Motor.vehicle.license + Other.taxes +
Charges.and.miscellaneous.general.revenue + Current.charges + Education +
School.lunch.sales..gross. + Hospitals + Highways + Air.transportation..airports. +
Parking.facilities + Sea.and.inland.port.facilities + Natural.resources +
Parks.and.recreation + Housing.and.community.development + Sewerage +
Solid.waste.management + Other.charges + Capital.outlay + Higher.education +
Elementary...secondary + Other.education + Libraries + Public.welfare +
Cash.assistance.payments + Vendor.payments + Other.public.welfare + Health +
Veterans..services + Police.protection + Debt.outstanding +
Employment.security.administration,
data = FinalDataset,
model = "within"
)
summary(fe_model_plm)
fe_model_plm <- plm(
Annual_Debt_to_income_ratio_low ~
POPESTIMATE + AGE59_PROP + AGE1014_PROP + AGE1519_PROP +
AGE2529_PROP + AGE3034_PROP + AGE3539_PROP + AGE4044_PROP + AGE4549_PROP +
AGE5054_PROP + AGE5559_PROP + AGE6064_PROP + AGE6569_PROP + AGE7074_PROP +
AGE7579_PROP + AGE8084_PROP + AGE85PLUS_PROP +
Real.GDP..millions.of.chained.2017.dollars..1. +
Compensation..millions.of.dollars. + Gross.operating.surplus..millions.of.dollars. +
Taxes.on.production.and.imports..TOPI...millions.of.dollars. +
Subsidies..millions.of.dollars. + From.State.government1 + Taxes + Property +
Sales.and.gross.receipts + General.sales + Selective.sales + Motor.fuel +
Alcoholic.beverage + Tobacco.products + Public.utilities + Other.selective.sales +
Individual.income + Corporate.income + Motor.vehicle.license + Other.taxes +
Charges.and.miscellaneous.general.revenue + Current.charges + Education +
School.lunch.sales..gross. + Hospitals + Highways + Air.transportation..airports. +
Parking.facilities + Sea.and.inland.port.facilities + Natural.resources +
Parks.and.recreation + Housing.and.community.development + Sewerage +
Solid.waste.management + Other.charges + Capital.outlay + Higher.education +
Elementary...secondary + Other.education + Libraries + Public.welfare +
Cash.assistance.payments + Vendor.payments + Other.public.welfare + Health +
Veterans..services + Police.protection + Debt.outstanding +
Employment.security.administration,
data = FinalDataset,
model = "within"
)
summary(fe_model_plm)
fe_model_plm <- plm(
Annual_Debt_to_income_ratio_low ~
POPESTIMATE + AGE04_PROP + AGE59_PROP + AGE1014_PROP + AGE1519_PROP +
AGE2529_PROP + AGE3034_PROP + AGE3539_PROP + AGE4044_PROP + AGE4549_PROP +
AGE5054_PROP + AGE5559_PROP + AGE6064_PROP + AGE6569_PROP + AGE7074_PROP +
AGE7579_PROP + AGE8084_PROP + AGE85PLUS_PROP +
Real.GDP..millions.of.chained.2017.dollars..1. +
Compensation..millions.of.dollars. + Gross.operating.surplus..millions.of.dollars. +
Taxes.on.production.and.imports..TOPI...millions.of.dollars. +
Subsidies..millions.of.dollars.  + Property +
Sales.and.gross.receipts + General.sales + Selective.sales + Motor.fuel +
Alcoholic.beverage + Tobacco.products + Public.utilities + Other.selective.sales +
Individual.income + Corporate.income + Motor.vehicle.license + Other.taxes +
Charges.and.miscellaneous.general.revenue + Current.charges + Education +
School.lunch.sales..gross. + Hospitals + Highways + Air.transportation..airports. +
Parking.facilities + Sea.and.inland.port.facilities + Natural.resources +
Parks.and.recreation + Housing.and.community.development + Sewerage +
Solid.waste.management + Other.charges + Capital.outlay + Higher.education +
Elementary...secondary + Other.education + Libraries + Public.welfare +
Cash.assistance.payments + Vendor.payments + Other.public.welfare + Health +
Veterans..services + Police.protection + Debt.outstanding +
Employment.security.administration,
data = FinalDataset,
model = "within"
)
summary(fe_model_plm)
colnames(FinalDataset)
tax_revenue_by_year <- FinalDataset %>%
group_by(Year) %>%                      # Group data by "Year"
summarise(Total_Tax_Revenue = sum(Taxes, na.rm = TRUE))  # Aggregate tax revenue
# View aggregated data (optional)
print(tax_revenue_by_year)
# Plot the aggregated tax revenue over time
ggplot(data = tax_revenue_by_year, aes(x = Year, y = Total_Tax_Revenue)) +
geom_line(color = "blue", size = 1.2) +    # Add a line plot
geom_point(color = "red", size = 2) +      # Add points for each year
labs(
title = "Total Tax Revenue Over Time",
x = "Year",
y = "Total Tax Revenue (USD)"
) +
theme_minimal()                            # Use a clean theme for the plot
# Aggregate tax revenue by year (column name "Taxes" contains tax revenue)
tax_revenue_by_year <- FinalDataset %>%
group_by(Year) %>%                      # Group data by "Year"
summarise(Total_Tax_Revenue = sum(Taxes, na.rm = TRUE))  # Aggregate tax revenue
# Save the histogram as a JPEG file
output_path <- "C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH/Final Exploratory analysis/Tax_Revenue_Histogram.jpeg"
jpeg(output_path, width = 800, height = 600)  # Set output to JPEG file
# Plot the histogram
ggplot(data = tax_revenue_by_year, aes(x = Total_Tax_Revenue)) +
geom_histogram(binwidth = 100000, fill = "blue", color = "black", alpha = 0.7) +  # Histogram with bins
labs(
title = "Distribution of Total Tax Revenue",
x = "Total Tax Revenue (USD)",
y = "Frequency"
) +
theme_minimal()  # Use a clean theme
dev.off()  # Close the file output device
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(Merged_Population_SAGDP_DebtToIncomeRatio_Data, aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 10000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(FinalDataset, aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 10000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
gdp_histogram_plot
library(plm)
library(dplyr)
library(ggplot2)
library(glmnet)
library(readxl)
setwd("C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH/2. Merged Data/Intermediate Cleaning Datasets")
file_path <- "RealFinalData.csv"
FinalDataset <- read.csv(file_path)
#Generating an ID variable for the counties
FinalDataset$UniqueID <- paste(FinalDataset$State, FinalDataset$CTYNAME, sep = "_")
library(tidyverse)
library(dplyr)
# Load required libraries
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gganimate)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gganimate)
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(FinalDataset, aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 10000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
gdp_histogram_plot
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(FinalDataset, aes(x = log(Real.GDP..millions.of.chained.2017.dollars..1.))) +
geom_histogram(binwidth = 10000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars, logged)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
gdp_histogram_plot
# Create a histogram for Real GDP
gdp_histogram_plot <- ggplot(FinalDataset, aes(x = Real.GDP..millions.of.chained.2017.dollars..1.)) +
geom_histogram(binwidth = 10000, fill = "green", color = "black", alpha = 0.7) +  # Adjust binwidth as necessary
labs(
title = "Histogram of Real GDP (Millions of Chained 2017 Dollars)",
x = "Real GDP (Millions of Chained 2017 Dollars, logged)",
y = "Frequency"
) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 16),  # Increase size of x-axis title
axis.title.y = element_text(size = 16),  # Increase size of y-axis title
plot.title = element_text(size = 18)      # Increase size of plot title
)
gdp_histogram_plot
setwd("C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH/")
knitr::opts_chunk$set(echo = TRUE)
library(htmltools)
knitr::include_graphics("Visualizations/age_proportion_distribution_animation.gif")
setwd(""C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH")
setwd(C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH")
setwd(C:\Users\d57n293\Documents\GitHub\ECNS_560_AS-RH")
setwd("C:\Users\d57n293\Documents\GitHub\ECNS_560_AS-RH")
setwd("C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH")
knitr::include_graphics("Visualizations/Aggregate State Tax Revenue by Year.jpeg")
knitr::include_graphics("Visualizations\age_proportion_distribution_animation.gif")
setwd("C:/Users/d57n293/Documents/GitHub/ECNS_560_AS-RH")
knitr::include_graphics("Visualizations/age_proportion_distribution_animation.gif")
### Age Proportion Distribution Animation
![Debt-to-Income Ratios](Visualizations\age_proportion_distribution_animation.gif):\
getwd
getwd()
knitr::include_graphics("/Visualizations/age_proportion_distribution_animation.gif")
list.files("Visualizations")
normalizePath("Visualizations/Aggregate State Tax Revenue by Year.jpeg")
knitr::include_graphics("Visualizations/age_proportion_distribution_animation.gif")
knitr::include_graphics("Visualizations/debt_to_income_distribution_animation.gif")
knitr::include_graphics("Visualizations/Elasticnet output.png")
knitr::include_graphics("Visualizations/population_heatmap_animation.gif")
knitr::include_graphics("Visualizations/real_gdp_histogram_log.jpeg")
