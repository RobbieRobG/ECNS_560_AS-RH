file_path <- "C:/Users/d57n293/Documents/FinalDataset.csv"
data <- read.csv(file_path, header = TRUE, sep = ",")
library(dplyr)
library(ggplot2)
file_path <- "C:/Users/d57n293/Documents/FinalDataset.csv"
data <- read.csv(file_path, header = TRUE, sep = ",")
library(tidyverse)
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gganimate)
install.packages("gifski")
library(gifski)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gganimate)
library(tidyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(gganimate)
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount")
FinalDataset<- read.csv(file_path, header = TRUE, sep = ",")
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount")
tax_plot <- ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack", na.rm = TRUE) +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "StateTaxRevenueOverTime2.jpeg", plot = tax_plot, width = 10, height = 6, dpi = 300)
#Revenue Breakdown
ggsave(filename = "C:/Users/d57n293/Documents/StateTaxRevenueOverTime2.jpeg", plot = tax_plot, width = 10, height = 6, dpi = 300)
revenue_data <- FinalDataset %>%
pivot_longer(cols = c("Taxes"), names_to = "Revenue_Source", values_to = "Amount") %>%
# Filter states to include only those with data in 2015
group_by(State) %>%
filter(any(Year == 2015 & !is.na(Amount))) %>%
ungroup()
tax_plot <- ggplot(revenue_data, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack", na.rm = TRUE) +
labs(title = "Revenue Sources Over Time",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "C:/Users/d57n293/Documents/StateTaxRevenueOverTime2.jpeg", plot = tax_plot, width = 10, height = 6, dpi = 300)
ggsave(filename = "C:/Users/d57n293/Documents/StateTaxRevenueOverTime.jpeg", plot = tax_plot, width = 10, height = 6, dpi = 300)
View(revenue_data)
# List unique states
unique_states <- revenue_data %>%
distinct(State) %>%
pull(State)
# Print unique states
print(unique_states)
revenue_categories <- FinalDataset %>%
select(Year, State, Property, Sales.and.gross.receipts, General.sales, Selective.sales,
Motor.fuel, Alcoholic.beverage, Tobacco.products, Public.utilities,
Other.selective.sales, Individual.income, Corporate.income,
Motor.vehicle.license, Other.taxes) %>%
pivot_longer(cols = Property:Other.taxes, names_to = "Revenue_Source", values_to = "Amount") %>%
# Filter states to include only those with data in 2015
group_by(State) %>%
filter(any(Year == 2015 & !is.na(Amount))) %>%
ungroup()
# Create the stacked bar chart
tax_plot2 <- ggplot(revenue_categories, aes(x = Year, y = Amount, fill = Revenue_Source)) +
geom_bar(stat = "identity", position = "stack", na.rm = TRUE) +
labs(title = "Revenue Sources by Over Time, All States",
x = "Year",
y = "Revenue (in dollars)") +
theme_minimal()
ggsave(filename = "C:/Users/d57n293/Documents/StateTaxRevenueOverTimebySource.jpeg", plot = tax_plot2, width = 10, height = 6, dpi = 300)
# List unique states
unique_states <- revenue_data %>%
distinct(State) %>%
pull(State)
# Print unique states
print(unique_states)
# View the pdata.frame structure
summary(pdata)
library(plm)
library(dplyr)
library(ggplot2)
file_path <- "C:/Users/d57n293/Documents/FinalDataset.csv"
data <- read.csv(file_path, header = TRUE, sep = ",")
data$UniqueID <- paste(data$State, data$CTYNAME, sep = "_")
View(data)
pdata
file_path <- "C:/Users/d57n293/Documents/FinalDataset.csv"
data <- read.csv(file_path, header = TRUE, sep = ",")
data$UniqueID <- paste(data$State, data$CTYNAME, sep = "_")
# Aggregate data at the national level
national_data <- data %>%
group_by(Year) %>%
summarise(Total_General_Revenue = sum(General_revenue1, na.rm = TRUE))
# Convert the dataset to a panel data frame
pdata <- pdata.frame(data, index = c("UniqueID", "Year"))
# View the pdata.frame structure
summary(pdata)
colnames(data)
# Standardize numeric variables within each UniqueID (panel entity)
FinalDataset <- FinalDataset %>%
group_by(UniqueID) %>%
mutate(across(where(is.numeric), ~ scale(.) %>% as.vector())) %>%
ungroup()
library(plm)
library(dplyr)
library(ggplot2)
library(glmnet)
file_path <- "C:/Users/d57n293/Documents/FinalDataset.csv"
FinalDataset <- read.csv(file_path, header = TRUE, sep = ",")
install.packages("glmnet")
library(glmnet)
file_path <- "C:/Users/d57n293/Documents/FinalDataset.csv"
FinalDataset <- read.csv(file_path, header = TRUE, sep = ",")
FinalDataset$UniqueID <- paste(data$State, data$CTYNAME, sep = "_")
# Convert the dataset to a panel data frame
FinalDataset <- pdata.frame(FinalDataset, index = c("UniqueID", "Year"))
# View the pdata.frame structure
summary(FinalDataset)
library(tictoc)
install.packages("tictoc")
library(tictoc)
tic()
# Standardize numeric variables within each UniqueID (panel entity)
FinalDataset <- FinalDataset %>%
group_by(UniqueID) %>%
mutate(across(where(is.numeric), ~ scale(.) %>% as.vector())) %>%
ungroup()
# Step 2: Prepare Data for ElasticNet
# Define independent variables (X) and dependent variable (y)
X <- as.matrix(FinalDataset %>%
select(POPESTIMATE, AGE04_PROP:Employment.security.administration))
y <- FinalDataset$Annual_Debt_to_income_ratio_low
# Step 3: Run ElasticNet Regression
# Set the seed for reproducibility
set.seed(123)  # For reproducibility
# Fit ElasticNet model using cross-validation to find optimal lambda
elasticnet_model <- cv.glmnet(X, y, alpha = 0.5, family = "gaussian")
